" Options
" 
" All options have reasonable defaults so if the plug-in works after
" installation you don't need to change any options. These options can be
" configured in your vimrc script by including a line like this:
" 
"let g:ycm_min_num_of_chars_for_completion = 1
" Note that after changing an option in your vimrc script you have to
" restart Vim for the changes to take effect.
" 
" The g:ycm_min_num_of_chars_for_completion option
" 
" This option controls the number of characters the user needs to type
" before identifier-based completion suggestions are triggered. For
" example, if the option is set to 2, then when the user types a second
" alphanumeric character after a whitespace character, completion
" suggestions will be triggered. This option is NOT used for semantic
" completion.
" 
" Setting this option to a high number like 99 effectively turns off the
" identifier completion engine and just leaves the semantic engine.
" 
" Default: 2
"let g:ycm_min_num_of_chars_for_completion = 2
" 
" The g:ycm_min_num_identifier_candidate_chars option
" 
" This option controls the minimum number of characters that a
" completion candidate coming from the identifier completer must have to
" be shown in the popup menu.
" 
" A special value of 0 means there is no limit.
" 
" NOTE: This option only applies to the identifier completer; it has no
" effect on the various semantic completers.
" 
" Default: 0
"let g:ycm_min_num_identifier_candidate_chars = 0
" 
" The g:ycm_auto_trigger option
" 
" When set to 0, this option turns off YCM's identifier completer (the
" as-you-type popup) and the semantic triggers (the popup you'd get after
" typing . or -> in say C++). You can still force semantic completion with
" the <C-Space> shortcut.
" 
" If you want to just turn off the identifier completer but keep the
" semantic triggers, you should set g:ycm_min_num_of_chars_for_completion
" to a high number like 99.
" 
" Default: 1
"let g:ycm_auto_trigger = 1
" 
" The g:ycm_filetype_whitelist option
" 
" This option controls for which Vim filetypes (see :h filetype) should
" YCM be turned on. The option value should be a Vim dictionary with keys
" being filetype strings (like python, cpp etc) and values being
" unimportant (the dictionary is used like a hash set, meaning that only
" the keys matter).
" 
" The * key is special and matches all filetypes. By default, the
" whitelist contains only this * key.
" 
" YCM also has a g:ycm_filetype_blacklist option that lists filetypes
" for which YCM shouldn't be turned on. YCM will work only in filetypes
" that both the whitelist and the blacklist allow (the blacklist "allows"
" a filetype by not having it as a key).
" 
" For example, let's assume you want YCM to work in files with the cpp
" filetype. The filetype should then be present in the whitelist either
" directly (cpp key in the whitelist) or indirectly through the special *
" key. It should not be present in the blacklist.
" 
" Filetypes that are blocked by the either of the lists will be
" completely ignored by YCM, meaning that neither the identifier-based
" completion engine nor the semantic engine will operate in them.
" 
" You can get the filetype of the current file in Vim with :set ft?.
" 
" Default: {'*' : 1}
"let g:ycm_filetype_whitelist = { '*': 1 }
" 
" The g:ycm_filetype_blacklist option
" 
" This option controls for which Vim filetypes (see :h filetype) should
" YCM be turned off. The option value should be a Vim dictionary with keys
" being filetype strings (like python, cpp etc) and values being
" unimportant (the dictionary is used like a hash set, meaning that only
" the keys matter).
" 
" See the g:ycm_filetype_whitelist option for more details on how this
" works.
" 
" Default: [see next line]
"let g:ycm_filetype_blacklist = {
"      \ 'tagbar' : 1,
"      \ 'qf' : 1,
"      \ 'notes' : 1,
"      \ 'markdown' : 1,
"      \ 'unite' : 1,
"      \ 'text' : 1,
"      \ 'vimwiki' : 1,
"      \ 'pandoc' : 1,
"      \ 'infolog' : 1,
"      \ 'mail' : 1
"      \}
" 
" The g:ycm_filetype_specific_completion_to_disable option
" 
" This option controls for which Vim filetypes (see :h filetype) should
" the YCM semantic completion engine be turned off. The option value
" should be a Vim dictionary with keys being filetype strings (like
" python, cpp etc) and values being unimportant (the dictionary is used
" like a hash set, meaning that only the keys matter). The listed
" filetypes will be ignored by the YCM semantic completion engine, but the
" identifier-based completion engine will still trigger in files of those
" filetypes.
" 
" Note that even if semantic completion is not turned off for a specific
" filetype, you will not get semantic completion if the semantic engine
" does not support that filetype.
" 
" You can get the filetype of the current file in Vim with :set ft?.
" 
" Default: {}
"let g:ycm_filetype_specific_completion_to_disable = {}
" 
" The g:ycm_show_diagnostics_ui option
" 
" When set, this option turns on YCM's diagnostic display features. See
" the Diagnostic display section in the User Manual for more details.
" 
" Specific parts of the diagnostics UI (like the gutter signs, text
" highlighting, diagnostic echo and auto location list population) can be
" individually turned on or off. See the other options below for details.
" 
" Note that YCM's diagnostics UI is only supported for C-family
" languages.
" 
" When set, this option also makes YCM remove all Syntastic checkers set
" for the c, cpp, objc and objcpp filetypes since this would conflict with
" YCM's own diagnostics UI.
" 
" If you're using YCM's identifier completer in C-family languages but
" cannot use the clang-based semantic completer for those languages and
" want to use the GCC Syntastic checkers, unset this option.
" 
" Default: 1
" 
"let g:ycm_show_diagnostics_ui = 1
" 
" The g:ycm_error_symbol option
" 
" YCM will use the value of this option as the symbol for errors in the
" Vim gutter.
" 
" This option is part of the Syntastic compatibility layer; if the
" option is not set, YCM will fall back to the value of the
" g:syntastic_error_symbol option before using this option's default.
" 
" Default: >>
" 
"let g:ycm_error_symbol = '>>'
" 
" The g:ycm_warning_symbol option
" 
" YCM will use the value of this option as the symbol for warnings in
" the Vim gutter.
" 
" This option is part of the Syntastic compatibility layer; if the
" option is not set, YCM will fall back to the value of the
" g:syntastic_warning_symbol option before using this option's default.
" 
" Default: >>
"let g:ycm_warning_symbol = '>>'
" 
" The g:ycm_enable_diagnostic_signs option
" 
" When this option is set, YCM will put icons in Vim's gutter on lines
" that have a diagnostic set. Turning this off will also turn off the
" YcmErrorLine and YcmWarningLine highlighting.
" 
" This option is part of the Syntastic compatibility layer; if the
" option is not set, YCM will fall back to the value of the
" g:syntastic_enable_signs option before using this option's default.
" 
" Default: 1
"let g:ycm_enable_diagnostic_signs = 1
" 
" The g:ycm_enable_diagnostic_highlighting option
" 
" When this option is set, YCM will highlight regions of text that are
" related to the diagnostic that is present on a line, if any.
" 
" This option is part of the Syntastic compatibility layer; if the
" option is not set, YCM will fall back to the value of the
" g:syntastic_enable_highlighting option before using this option's
" default.
" 
" Default: 1
"let g:ycm_enable_diagnostic_highlighting = 1
" 
" The g:ycm_echo_current_diagnostic option
" 
" When this option is set, YCM will echo the text of the diagnostic
" present on the current line when you move your cursor to that line.
" 
" This option is part of the Syntastic compatibility layer; if the
" option is not set, YCM will fall back to the value of the
" g:syntastic_echo_current_error option before using this option's
" default.
" 
" Default: 1
"let g:ycm_echo_current_diagnostic = 1
" 
" The g:ycm_always_populate_location_list option
" 
" When this option is set, YCM will populate the location list
" automatically every time it gets new diagnostic data. This option is off
" by default so as not to interfere with other data you might have placed
" in the location list.
" 
" See :help location-list in Vim to learn more about the location list.
" 
" This option is part of the Syntastic compatibility layer; if the
" option is not set, YCM will fall back to the value of the
" g:syntastic_always_populate_loc_list option before using this option's
" default.
" 
" Default: 0
"let g:ycm_always_populate_location_list = 0
" 
"The g:ycm_open_loclist_on_ycm_diags option
" 
" When this option is set, :YcmDiags will automatically open the
" location list after forcing a compilation and filling the list with
" diagnostic data.
" 
" See :help location-list in Vim to learn more about the location list.
" 
" Default: 1
"let g:ycm_open_loclist_on_ycm_diags = 1
" 
" The g:ycm_allow_changing_updatetime option
" 
" When this option is set to 1, YCM will change the updatetime Vim
" option to 2000 (see :h updatetime). This may conflict with some other
" plugins you have (but it's unlikely). The updatetime option is the
" number of milliseconds that have to pass before Vim's CursorHold (see :h
" CursorHold) event fires. YCM runs the completion engines' "file
" comprehension" systems in the background on every such event; the
" identifier-based engine collects the identifiers whereas the semantic
" engine compiles the file to build an AST.
" 
" The Vim default of 4000 for updatetime is a bit long, so YCM reduces
" this. Set this option to 0 to force YCM to leave your updatetime setting
" alone.
" 
" Default: 1
"let g:ycm_allow_changing_updatetime = 1
" 
" The g:ycm_complete_in_comments option
" 
" When this option is set to 1, YCM will show the completion menu even
" when typing inside comments.
" 
" Default: 0
"let g:ycm_complete_in_comments = 0
" 
" The g:ycm_complete_in_strings option
" 
" When this option is set to 1, YCM will show the completion menu even
" when typing inside strings.
" 
" Note that this is turned on by default so that you can use the
" filename completion inside strings. This is very useful for instance in
" C-family files where typing #include " will trigger the start of
" filename completion. If you turn off this option, you will turn off
" filename completion in such situations as well.
" 
" Default: 1
"let g:ycm_complete_in_strings = 1
" 
" The g:ycm_collect_identifiers_from_comments_and_strings option
" 
" When this option is set to 1, YCM's identifier completer will also
" collect identifiers from strings and comments. Otherwise, the text in
" comments and strings will be ignored.
" 
" Default: 0
"let g:ycm_collect_identifiers_from_comments_and_strings = 0
" 
" The g:ycm_collect_identifiers_from_tags_files option
" 
" When this option is set to 1, YCM's identifier completer will also
" collect identifiers from tags files. The list of tags files to examine
" is retrieved from the tagfiles() Vim function which examines the tags
" Vim option. See :h 'tags' for details.
" 
" YCM will re-index your tags files if it detects that they have been
" modified.
" 
" The only supported tag format is the Exuberant Ctags format. The
" format from "plain" ctags is NOT supported. Ctags needs to be called
" with the --fields=+l option (that's a lowercase L, not a one) because
" YCM needs the language:<lang> field in the tags output.
" 
" See the FAQ for pointers if YCM does not appear to read your tag
" files.
" 
" This option is off by default because it makes Vim slower if your tags
" are on a network directory.
"  
" Default: 0
"let g:ycm_collect_identifiers_from_tags_files = 0
" 
" The g:ycm_seed_identifiers_with_syntax option
" 
" When this option is set to 1, YCM's identifier completer will seed its
" identifier database with the keywords of the programming language you're
" writing.
" 
" Since the keywords are extracted from the Vim syntax file for the
" filetype, all keywords may not be collected, depending on how the syntax
" file was written. Usually at least 95% of the keywords are successfully
" extracted.
" 
" Default: 0
"let g:ycm_seed_identifiers_with_syntax = 0
"  
" The g:ycm_extra_conf_vim_data option
" 
" If you're using semantic completion for C-family files, this option
" might come handy; it's a way of sending data from Vim to your
" FlagsForFile function in your .ycm_extra_conf.py file.
" 
" This option is supposed to be a list of VimScript expression strings
" that are evaluated for every request to the ycmd server and then passed
" to your FlagsForFile function as a client_data keyword argument.
" 
" For instance, if you set this option to ['v:version'], your
" FlagsForFile function will be called like this:
" 
" # The '704' value is of course contingent on Vim 7.4; in 7.3 it would
" be '703'
" FlagsForFile(filename, client_data = {'v:version': 704})
" So the client_data parameter is a dictionary mapping Vim expression
" strings to their values at the time of the request.
" 
" The correct way to define parameters for your FlagsForFile function:
" 
" def FlagsForFile(filename, **kwargs):
" You can then get to client_data with kwargs['client_data'].
" 
" Default: []
"let g:ycm_extra_conf_vim_data = []
" 
" The g:ycm_path_to_python_interpreter option
" 
" YCM will by default search for an appropriate Python interpreter on
" your system. You can use this option to override that behavior and force
" the use of a specific interpreter of your choosing.
" 
" NOTE: This interpreter is only used for the ycmd server. The YCM
" client running inside Vim always uses the Python interpreter that's
" embedded inside Vim.
" 
" Default: ''
"let g:ycm_path_to_python_interpreter = ''
" 
" The g:ycm_server_use_vim_stdout option
" 
" By default, the ycmd completion server writes logs to logfiles. When
" this option is set to 1, the server writes logs to Vim's stdout (so
" you'll see them in the console).
" 
" Default: 0
"let g:ycm_server_use_vim_stdout = 0
" 
" The g:ycm_server_keep_logfiles option
" 
" When this option is set to 1, the ycmd completion server will keep the
" logfiles around after shutting down (they are deleted on shutdown by
" default).
" 
" To see where the logfiles are, call :YcmDebugInfo.
" 
" Default: 0
"let g:ycm_server_keep_logfiles = 0
" 
" The g:ycm_server_log_level option
" 
" The logging level that the ycmd completion server uses. Valid values
" are the following, from most verbose to least verbose:
" 
" debug
" info
" warning
" error
" critical
" Note that debug is very verbose.
" 
" Default: info
"let g:ycm_server_log_level = 'info'
" 
" The g:ycm_auto_start_csharp_server option
" 
" When set to 1, the OmniSharp server will be automatically started
" (once per Vim session) when you open a C# file.
" 
" Default: 1
"let g:ycm_auto_start_csharp_server = 1
" 
" The g:ycm_auto_stop_csharp_server option
" 
" When set to 1, the OmniSharp server will be automatically stopped upon
" closing Vim.
" 
" Default: 1
"let g:ycm_auto_stop_csharp_server = 1
" 
" The g:ycm_add_preview_to_completeopt option
" 
" When this option is set to 1, YCM will add the preview string to Vim's
" completeopt option (see :h completeopt). If your completeopt option
" already has preview set, there will be no effect. You can see the
" current state of your completeopt setting with :set completeopt? (yes,
" the question mark is important).
" 
" When preview is present in completeopt, YCM will use the preview
" window at the top of the file to store detailed information about the
" current completion candidate (but only if the candidate came from the
" semantic engine). For instance, it would show the full function
" prototype and all the function overloads in the window if the current
" completion is a function name.
" 
" Default: 0
"let g:ycm_add_preview_to_completeopt = 0
" 
" The g:ycm_autoclose_preview_window_after_completion option
" 
" When this option is set to 1, YCM will auto-close the preview window
" after the user accepts the offered completion string. If there is no
" preview window triggered because there is no preview string in
" completeopt, this option is irrelevant. See the
" g:ycm_add_preview_to_completeopt option for more details.
" 
" Default: 0
"let g:ycm_autoclose_preview_window_after_completion = 0
" 
" The g:ycm_autoclose_preview_window_after_insertion option
" 
" When this option is set to 1, YCM will auto-close the preview window
" after the user leaves insert mode. This option is irrelevant if
" g:ycm_autoclose_preview_window_after_completion is set or if no preview
" window is triggered. See the g:ycm_add_preview_to_completeopt option for
" more details.
" 
" Default: 0
"let g:ycm_autoclose_preview_window_after_insertion = 0
" 
" The g:ycm_max_diagnostics_to_display option
" 
" This option controls the maximum number of diagnostics shown to the
" user when errors or warnings are detected in the file. This option is
" only relevant if you are using the C-family semantic completion engine.
" 
" Default: 30
"let g:ycm_max_diagnostics_to_display = 30
" 
" The g:ycm_key_list_select_completion option
" 
" This option controls the key mappings used to select the first
" completion string. Invoking any of them repeatedly cycles forward
" through the completion list.
" 
" Some users like adding <Enter> to this list.
" 
" Default: ['<TAB>', '<Down>']
"let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
" 
" The g:ycm_key_list_previous_completion option
" 
" This option controls the key mappings used to select the previous
" completion string. Invoking any of them repeatedly cycles backwards
" through the completion list.
" 
" Note that one of the defaults is <S-TAB> which means Shift-TAB. That
" mapping will probably only work in GUI Vim (Gvim or MacVim) and not in
" plain console Vim because the terminal usually does not forward modifier
" key combinations to Vim.
" 
" Default: ['<S-TAB>', '<Up>']
"let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']
" 
" The g:ycm_key_invoke_completion option
" 
" This option controls the key mapping used to invoke the completion
" menu for semantic completion. By default, semantic completion is trigged
" automatically after typing ., -> and :: in insert mode (if semantic
" completion support has been compiled in). This key mapping can be used
" to trigger semantic completion anywhere. Useful for searching for
" top-level functions and classes.
" 
" Console Vim (not Gvim or MacVim) passes <Nul> to Vim when the user
" types <C-Space> so YCM will make sure that <Nul> is used in the map
" command when you're editing in console Vim, and <C-Space> in GUI Vim.
" This means that you can just press <C-Space> in both console and GUI Vim
" and YCM will do the right thing.
" 
" Setting this option to an empty string will make sure no mapping is
" created.
" 
" Default: <C-Space>
"let g:ycm_key_invoke_completion = '<C-Space>'
" 
" The g:ycm_key_detailed_diagnostics option
" 
" This option controls the key mapping used to show the full diagnostic
" text when the user's cursor is on the line with the diagnostic. It
" basically calls :YcmShowDetailedDiagnostic.
" 
" Setting this option to an empty string will make sure no mapping is
" created.
" 
" Default: <leader>d
"let g:ycm_key_detailed_diagnostics = '<leader>d'
" 
" The g:ycm_global_ycm_extra_conf option
" 
" Normally, YCM searches for a .ycm_extra_conf.py file for compilation
" flags (see the User Guide for more details on how this works). This
" option specifies a fallback path to a config file which is used if no
" .ycm_extra_conf.py is found.
" 
" You can place such a global file anywhere in your filesystem.
" 
" Default: ''
"let g:ycm_global_ycm_extra_conf = ''
" 
" The g:ycm_confirm_extra_conf option
" 
" When this option is set to 1 YCM will ask once per .ycm_extra_conf.py
" file if it is safe to be loaded. This is to prevent execution of
" malicious code from a .ycm_extra_conf.py file you didn't write.
" 
" To selectively get YCM to ask/not ask about loading certain
" .ycm_extra_conf.py files, see the g:ycm_extra_conf_globlist option.
" 
" Default: 1
"let g:ycm_confirm_extra_conf = 1
" 
" The g:ycm_extra_conf_globlist option
" 
" This option is a list that may contain several globbing patterns. If a
" pattern starts with a ! all .ycm_extra_conf.py files matching that
" pattern will be blacklisted, that is they won't be loaded and no
" confirmation dialog will be shown. If a pattern does not start with a !
" all files matching that pattern will be whitelisted. Note that this
" option is not used when confirmation is disabled using
" g:ycm_confirm_extra_conf and that items earlier in the list will take
" precedence over the later ones.
" 
" Rules:
" 
" * matches everything
" ? matches any single character
" [seq] matches any character in seq
" [!seq] matches any char not in seq
" Example:
" 
"let g:ycm_extra_conf_globlist = ['~/dev/*','!~/*']
" The first rule will match everything contained in the ~/dev directory
" so .ycm_extra_conf.py files from there will be loaded.
" The second rule will match everything in the home directory so a
" .ycm_extra_conf.py file from there won't be loaded.
" As the first rule takes precedence everything in the home directory
" excluding the ~/dev directory will be blacklisted.
" Default: []
"let g:ycm_extra_conf_globlist = []
" 
" The g:ycm_filepath_completion_use_working_dir option
" 
" By default, YCM's filepath completion will interpret relative paths
" like ../ as being relative to the folder of the file of the currently
" active buffer. Setting this option will force YCM to always interpret
" relative paths as being relative to Vim's current working directory.
" 
" Default: 0
"let g:ycm_filepath_completion_use_working_dir = 0
" 
" The g:ycm_semantic_triggers option
" 
" This option controls the character-based triggers for the various
" semantic completion engines. The option holds a dictionary of
" key-values, where the keys are Vim's filetype strings delimited by
" commas and values are lists of strings, where the strings are the
" triggers.
" 
" Setting key-value pairs on the dictionary adds semantic triggers to
" the internal default set (listed below). You cannot remove the default
" triggers, only add new ones.
" 
" A "trigger" is a sequence of one or more characters that trigger
" semantic completion when typed. For instance, C++ (cpp filetype) has .
" listed as a trigger. So when the user types foo., the semantic engine
" will trigger and serve foo's list of member functions and variables.
" Since C++ also has -> listed as a trigger, the same thing would happen
" when the user typed foo->.
" 
" Default: [see next line]
"let g:ycm_semantic_triggers =  {
"  \   'c' : ['->', '.'],
"  \   'objc' : ['->', '.'],
"  \   'ocaml' : ['.', '#'],
"  \   'cpp,objcpp' : ['->', '.', '::'],
"  \   'perl' : ['->'],
"  \   'php' : ['->', '::'],
"  \   'cs,java,javascript,d,vim,python,perl6,scala,vb,elixir,go' : ['.'],
"  \   'ruby' : ['.', '::'],
"  \   'lua' : ['.', ':'],
"  \   'erlang' : [':'],
"  \ }
" 
" The g:ycm_cache_omnifunc option
" 
" Some omnicompletion engines do not work well with the YCM cache—in
" particular, they might not produce all possible results for a given
" prefix. By unsetting this option you can ensure that the omnicompletion
" engine is requeried on every keypress. That will ensure all completions
" will be presented, but might cause stuttering and lagginess if the
" omnifunc is slow.
" 
" Default: 1
"let g:ycm_cache_omnifunc = 1
" 
" The g:ycm_use_ultisnips_completer option
" 
" By default, YCM will query the UltiSnips plugin for possible
" completions of snippet triggers. This option can turn that behavior off.
" 
" Default: 1
"let g:ycm_use_ultisnips_completer = 1
" 
" 
" The g:ycm_goto_buffer_command option
" 
" Defines where GoTo* commands result should be opened. Can take one of
" the following values: [ 'same-buffer', 'horizontal-split',
" 'vertical-split', 'new-tab' ] If this option is set to the 'same-buffer'
" but current buffer can not be switched (when buffer is modified and
" nohidden option is set), then result will be opened in horizontal split.
" 
" Default: 'same-buffer'
"let g:ycm_goto_buffer_command = 'same-buffer'



let g:acp_enableAtStartup = 0

" enable completion from tags
let g:ycm_collect_identifiers_from_tags_files = 1

" remap Ultisnips for compatibility for YCM
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Haskell post write lint and check with ghcmod
" $ `cabal install ghcmod` if missing and ensure
" ~/.cabal/bin is in your $PATH.
if !executable("ghcmod")
  autocmd BufWritePost *.hs GhcModCheckAndLintAsync
endif

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

